// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  introduction       String?
  thumbnailPath      String?              @map("thumbnail_path")
  uploadedScenarios  Scenario[]
  keeperedSessions   Session[]
  sessionPlayer      SessionPlayer[]
  feedback           Feedback[]
  ScenarioPlayStatus ScenarioPlayStatus[]
  Video              Video[]

  @@map("users")
}

model Scenario {
  id                 String               @id @default(uuid())
  name               String
  author             String?
  description        String?
  shortDescription   String?              @map("short_description")
  thumbnailPath      String?              @map("thumbnail_path")
  minPlayer          Int                  @map("min_player")
  maxPlayer          Int                  @map("max_player")
  minPlaytime        Int                  @map("min_playtime")
  maxPlaytime        Int                  @map("max_playtime")
  handoutType        ScenarioHOType       @default(NONE)
  uploadedUser       User?                @relation(fields: [uploadedUserId], references: [id])
  uploadedUserId     String               @map("uploaded_user_id")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  sessions           Session[]
  video              Video[]
  feedback           Feedback[]
  scenarioTag        ScenarioTag[]
  ScenarioPlayStatus ScenarioPlayStatus[]

  @@map("scenarios")
}

model ScenarioTag {
  scenario   Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId String   @map("scenario_id")
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @map("tag_id")

  @@id([scenarioId, tagId])
  @@map("scenario_tags")
}

model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  color       String?
  scenarioTag ScenarioTag[]

  @@map("tags")
}

model ScenarioPlayStatus {
  scenario   Scenario   @relation(fields: [scenarioId], references: [id])
  scenarioId String     @map("scenario_id")
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @map("user_id")
  status     PlayStatus @default(UNPLAYED)

  @@id([scenarioId, userId])
  @@map("scenario_play_statuses")
}

model Session {
  id               String            @id @default(uuid())
  scenario         Scenario          @relation(fields: [scenarioId], references: [id])
  scenarioId       String            @map("scenario_id")
  sessionSchedules SessionSchedule[]
  status           SessionStatus     @map("status")
  keeperUser       User?             @relation(fields: [keeperId], references: [id])
  keeperId         String?           @map("keeper_id")
  SessionPlayer    SessionPlayer[]
  Video            Video[]
  Feedback         Feedback[]

  @@map("sessions")
}

model SessionPlayer {
  session     Session                 @relation(fields: [sessionId], references: [id])
  sessionId   String                  @map("session_id")
  user        User                    @relation(fields: [userId], references: [id])
  userId      String                  @map("user_id")
  playerType  SessionPlayerType
  playerState SessionPlayerStatusType

  @@id([sessionId, userId])
  @@map("session_players")
}

model SessionSchedule {
  session      Session        @relation(fields: [sessionId], references: [id])
  sessionId    String         @map("session_id")
  scheduleDate DateTime       @map("schedule_date")
  status       ScheduleStatus @default(AWAITING)

  @@id([sessionId, scheduleDate])
  @@map("session_schedules")
}

model Video {
  id           String   @id @default(uuid())
  scenario     Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId   String   @map("scenario_id")
  session      Session  @relation(fields: [sessionId], references: [id])
  sessionId    String   @map("session_id")
  url          String   @unique
  uploadedUser User     @relation(fields: [uploadedBy], references: [id])
  uploadedBy   String   @map("uploaded_by")

  @@map("videos")
}

model Feedback {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @map("user_id")
  scenario       Scenario @relation(fields: [scenarioId], references: [id])
  scenarioId     String   @map("scenario_id")
  session        Session? @relation(fields: [sessionId], references: [id])
  sessionId      String?  @map("session_id")
  openComment    String?  @map("open_comment")
  spoilerComment String?  @map("spoiler_comment")
  rating         Int?

  @@map("feedbacks")
}

enum ScenarioHOType {
  NONE   @map("なし")
  PUBLIC @map("公開")
  SECRET @map("秘匿")
}

enum PlayStatus {
  UNPLAYED @map("未プレイ")
  PLAYED   @map("プレイ済み")
  WATCHED  @map("視聴済み")
}

enum ScheduleStatus {
  AWAITING  @map("開始待ち")
  CONCLUDED @map("終了済み")
}

enum SessionStatus {
  RECRUITING @map("募集中")
  SCHEDULING @map("日程調整中")
  AWAITING   @map("開始待ち")
  CONCLUDED  @map("終了済み")
}

enum SessionPlayerType {
  PLAYER    @map("プレイヤー")
  SPECTATOR @map("観戦")
}

enum SessionPlayerStatusType {
  UNLOCK @map("未確定")
  LOCKED @map("確定")
}
